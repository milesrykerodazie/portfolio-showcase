// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?    @unique
  email         String?    @unique
  password      String?
  profilePic    UserImage?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserImage {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String @unique
  url       String @default("")
  userId    String @unique @db.ObjectId // relation scalar field (used in the `@relation` attribute above)
  User      User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  owner_id    String         @db.ObjectId
  title       String
  title_slug  String         @unique
  description String
  liveSiteUrl String
  githubUrl   String
  category    String
  images      ProjectImage[]
  User        User           @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProjectImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  projectId String  @db.ObjectId
  public_id String  @default("")
  url       String  @default("")
  owner     String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
